(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{352:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"回文串专题总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回文串专题总结"}},[t._v("#")]),t._v(" 回文串专题总结")]),t._v(" "),s("p",[t._v("本想起个题目叫“关于回文串的一切”，但是水平太有限了，还是叫专题总结好了。")]),t._v(" "),s("p",[t._v("视角主要是Leetcode的视角，进行了浅显的总结，"),s("strong",[t._v("如有疏漏错误还请告知")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_1-回文串题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-回文串题目"}},[t._v("#")]),t._v(" 1. 回文串题目")]),t._v(" "),s("p",[t._v("目前我接触到的回文串题目有两类。")]),t._v(" "),s("ul",[s("li",[t._v("第一类是单纯考"),s("strong",[t._v("寻找")]),t._v("或"),s("strong",[t._v("判断")]),t._v("以及"),s("strong",[t._v("构造")]),t._v("回文串的知识，这种通常比较模板化，比如中心拓展法，Manacher算法，KMP算法，解决这类问题通常需要一定的算法基础以及代码熟练度。")]),t._v(" "),s("li",[t._v("第二类是以回文串为背景，在此基础上"),s("strong",[t._v("考察回溯、DP等其他算法")]),t._v("，这一类题变化多端，有的难度比较大。解决这类问题通常比较考验对各类算法的理解和变通，需要有比较强的泛化能力。")])]),t._v(" "),s("p",[t._v("下面是对做过题目的梳理与知识点归纳：")]),t._v(" "),s("p",[s("strong",[t._v("需要秒出思路的题")]),t._v("：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-number",target:"_blank",rel:"noopener noreferrer"}},[t._v("9. 回文数"),s("OutboundLink")],1),t._v(" 【Easy，小套路 + 判断回文串】")]),t._v(" "),s("ul",[s("li",[t._v("判断"),s("strong",[t._v("是不是")]),t._v("回文数")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-linked-list",target:"_blank",rel:"noopener noreferrer"}},[t._v("234. 回文链表"),s("OutboundLink")],1),t._v(" 【Easy，链表反转 + 判断回文串】")]),t._v(" "),s("ul",[s("li",[t._v("判断"),s("strong",[t._v("是不是")]),t._v("回文联表")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("5. 最长回文子串"),s("OutboundLink")],1),t._v(" 【Medium，寻找满足条件的回文串】")]),t._v(" "),s("ul",[s("li",[t._v("求最长的回文子串"),s("strong",[t._v("长度")])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindromic-substrings",target:"_blank",rel:"noopener noreferrer"}},[t._v("647. 回文子串"),s("OutboundLink")],1),t._v(" 【Medium，判断回文串】")]),t._v(" "),s("ul",[s("li",[t._v("求回文子串的"),s("strong",[t._v("数量")])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning",target:"_blank",rel:"noopener noreferrer"}},[t._v("131. 分割回文串"),s("OutboundLink")],1),t._v(" 【Medium，判断回文串 + 回溯】")]),t._v(" "),s("ul",[s("li",[t._v("返回分割为一到多个回文串的"),s("strong",[t._v("所有方案")])])]),t._v(" "),s("p",[s("strong",[t._v("需要好好想一想的题")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning-ii",target:"_blank",rel:"noopener noreferrer"}},[t._v("132. 分割回文串 II"),s("OutboundLink")],1),t._v(" 【Hard，判断回文串 + DP】")]),t._v(" "),s("ul",[s("li",[t._v("返回分割为一或多个回文串的"),s("strong",[t._v("最小分割次数")])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning-iii",target:"_blank",rel:"noopener noreferrer"}},[t._v("1278. 分割回文串 III"),s("OutboundLink")],1),t._v(" 【Hard，判断回文串 + DP】")]),t._v(" "),s("ul",[s("li",[t._v("允许修改以满足回文，问分割成k个回文子串"),s("strong",[t._v("需要修改的最小字符数")])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-insertion-steps-to-make-a-string-palindrome",target:"_blank",rel:"noopener noreferrer"}},[t._v("1312. 让字符串成为回文串的最少插入次数"),s("OutboundLink")],1),t._v(" 【Hard，构造回文串 + DP】")]),t._v(" "),s("ul",[s("li",[t._v("返回成为回文串的"),s("strong",[t._v("最少插入次数")])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/shortest-palindrome",target:"_blank",rel:"noopener noreferrer"}},[t._v("214. 最短回文串"),s("OutboundLink")],1),t._v(" 【Hard，KMP算法构造回文串】")]),t._v(" "),s("ul",[s("li",[t._v("？？？？？？待总结")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-pairs",target:"_blank",rel:"noopener noreferrer"}},[t._v("336. 回文对"),s("OutboundLink")],1),t._v(" 【Hard，？？？？？】")]),t._v(" "),s("ul",[s("li",[t._v("？？？？？？待总结")])]),t._v(" "),s("h2",{attrs:{id:"_2-回文串基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-回文串基础"}},[t._v("#")]),t._v(" 2. 回文串基础")]),t._v(" "),s("h3",{attrs:{id:"_2-0-判断回文串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-判断回文串"}},[t._v("#")]),t._v(" 2.0 判断回文串")]),t._v(" "),s("p",[t._v("判断的方法很简单，如下面的函数所示，只需知道一个串以及它的开始与结束，从两侧到中心逐个判断即可。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPalindrome")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" begin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("begin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("begin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" begin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h3",{attrs:{id:"_2-1-中心拓展法计算最长回文串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-中心拓展法计算最长回文串"}},[t._v("#")]),t._v(" 2.1 中心拓展法计算最长回文串")]),t._v(" "),s("p",[t._v("如果给你一个字符串，问你这个字符串中最长的回文串是哪个（或者问长度），典型例题是"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("5. 最长回文子串"),s("OutboundLink")],1),t._v("。解决这类问题的最常规的方法就是中心拓展法。")]),t._v(" "),s("p",[t._v("中心拓展法唯一需要注意的是，"),s("strong",[t._v("最终回文串的长度可能是奇数，也可能是偶数")]),t._v("，因此中心也存在两种，"),s("strong",[t._v("一种是以当前点为中心（对应奇数长度），另一种是以当前点和下一个点为中心（对应偶数长度）")]),t._v("。")]),t._v(" "),s("p",[t._v("拓展函数的代码如下：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("pair"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expandAroundCenter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("需要注意的是，这个函数并不会主动寻找两种中心，而是需要调用的时候用两次：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expandAroundCenter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expandAroundCenter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接着判断哪个最大，或者维护最大长度")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("中心拓展法的时间复杂度是$O(N^2)$,$N$是字符串的长度。空间复杂度是$O(1)$，即无需额外空间。")]),t._v(" "),s("h3",{attrs:{id:"_2-2-manacher算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-manacher算法"}},[t._v("#")]),t._v(" 2.2 Manacher算法")]),t._v(" "),s("p",[t._v("我们仔细观察中心拓展法就可以发现，中间存在很多反复的判断，直觉上造成了一定的浪费。Manacher算法正是通过一个简单的方法利用了前面已经判断完的回文串的信息，来降低复杂度，一举将$O(N^2)$降低到了$O(N)$，不过这种信息需要存储，也就是需要一定的空间代价，空间复杂度也从$O(1)$上升到了$O(N)$。")]),t._v(" "),s("p",[t._v("Manacher算法的核心是利用已知回文串的中心对称性，对未知中心拓展进行初始化，"),s("strong",[t._v("避免所有的中心拓展都从中心开始")]),t._v("。")]),t._v(" "),s("p",[t._v("那它是怎么做的呢，参考"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/288756227",target:"_blank",rel:"noopener noreferrer"}},[t._v("【朝夕的ACM笔记】字符串-最长回文子串-Manacher算法"),s("OutboundLink")],1),t._v("中的插图，我给出了自己的理解与总结：")]),t._v(" "),s("p",[t._v("首先给出一个"),s("strong",[t._v("笼统的过程描述")]),t._v("：给出一个字符串，假设我们准备寻找以s[i]为中心的回文串时，按照中心拓展的思想，需要从s[i]开始寻找。但是如果在s[i]左侧的，以s[(i+j)/2]为中心的回文串（即下图的“当前回文串”）已知，那么可以根据这个串的对称性，发现以s[i]和以s[j]中心的回文串是对称的，而以j为中心的回文串目前是已知的。因此，可以把以s[j]为中心的长度d[j]作为以s[i]为中心的回文串的长度d[i],即(d[i] = d[j])，在此基础上再进行中心拓展，"),s("strong",[t._v("避免了每一个字符串都从零开始慢慢寻找")]),t._v("。这就是Manacher算法的核心思想。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic2.zhimg.com/v2-d8c6b89d8e2ba0cb888035d762fc9d9d_r.jpg",alt:"preview"}})]),t._v(" "),s("p",[t._v("那么实际的实现，需要维护两个东西来达到以上的目的：")]),t._v(" "),s("ul",[s("li",[t._v("一个是"),s("strong",[t._v("以每个字符为中心的最大回文半径")]),t._v("d[i]（它导致了空间复杂度的上升）")]),t._v(" "),s("li",[t._v("一个是所有已知回文串"),s("strong",[t._v("能达到的右侧最远的位置")]),t._v("max_r，以及对应的回文串中心max_center")])]),t._v(" "),s("p",[t._v("Manacher算法开始时就是普通的中心拓展法。不同的是，每次检验时都要注意是否被覆盖在max_center到max_r的范围内，如果在的话就要把它初始化，然后再进行中心拓展，然后再更新所需要记录的值（"),s("strong",[t._v("所以其实很简单")]),t._v("）。")]),t._v(" "),s("p",[t._v("这里有一个"),s("strong",[t._v("需要注意的点")]),t._v("，即如果我们找到的对应回文串d[j]的范围超过了 j - max_l（这里的max_l是右侧最远回文串的左端点，即max_l = 2*max_center - max_r），这时候不能把d[j]直接赋值给它，因为我们不知道超出右侧范围后的串的内容。这时候用来初始化的不应该是d[j]，而是j - l。")]),t._v(" "),s("p",[t._v("最后一个问题，因为存在奇数串和偶数串，为了容易处理，可以把原串的间隙（包括最左端和最右端）插入‘#’，例如[abcd]就变成[#a#b#c#d#]，"),s("strong",[t._v("这样操作后，无论怎样，串都是奇数个数")]),t._v("，而中心点也只剩一个，上述的操作实现就不必再考虑两种情况了。")]),t._v(" "),s("p",[t._v("最后还是以"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("5. 最长回文子串"),s("OutboundLink")],1),t._v("这个经典题为例子，给出实现代码：")]),t._v(" "),s("p",[t._v("时间复杂度：$O(N)$")]),t._v(" "),s("p",[t._v("空间复杂度：$O(N)$")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    pair"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expandAroundCenter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("creatString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      string new_s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        new_s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        new_s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'#'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" new_s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main function")]),t._v("\n    string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("longestPalindrome")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      string new_s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("creatString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new_s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("d")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max_ceter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start_right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start_left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Manacher的核心：拓展前的初始化")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" max_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" max_l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" max_ceter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" max_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" temp_r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("max_l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" max_r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("max_l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" max_r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          start_right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" temp_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          start_left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" temp_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expandAroundCenter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new_s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start_left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start_right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 维护与更新")]),t._v("\n        d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" max_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          max_r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          max_ceter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回问题所需结果，根据问题的不同而变化")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max_index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("max_index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  max_index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max_index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("max_index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("max_index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br")])]),s("p",[t._v("看起来代码长，但是如果理解了关键点其实很简单。网上都说Manacher不用掌握，我觉得还是应该学会的。抛开算法经典外，如果你只会个中心拓展，拿什么和别人卷。")]),t._v(" "),s("h3",{attrs:{id:"_2-3-kmp算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-kmp算法"}},[t._v("#")]),t._v(" 2.3 KMP算法")]),t._v(" "),s("p",[t._v("写不动了，参考"),s("a",{attrs:{href:"https://www.zhihu.com/question/21923021/answer/1032665486",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何更好地理解和掌握KMP算法 - 知乎"),s("OutboundLink")],1),t._v("，后续会补充我的理解。")]),t._v(" "),s("h3",{attrs:{id:"_2-4-回文自动机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-回文自动机"}},[t._v("#")]),t._v(" 2.4 回文自动机")]),t._v(" "),s("p",[t._v("又叫回文树，应该是回文问题的最终杀器。有兴趣的话参考："),s("a",{attrs:{href:"https://huzujun.github.io/posdt-palindromic_tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("回文自动机实现及模板"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_3-回文串与回溯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-回文串与回溯"}},[t._v("#")]),t._v(" 3. 回文串与回溯")]),t._v(" "),s("p",[t._v("关于回溯的问题典型是下面这题：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning",target:"_blank",rel:"noopener noreferrer"}},[t._v("131. 分割回文串"),s("OutboundLink")],1),t._v(" 【Medium，判断回文串 + 回溯】")]),t._v(" "),s("ul",[s("li",[t._v("返回分割为一到多个回文串的"),s("strong",[t._v("所有方案")])])]),t._v(" "),s("p",[t._v("与其说是回文串与回溯，不如说是"),s("strong",[t._v("数组回溯")]),t._v("。目前常见的两种回溯，一种是数组上回溯，一种是树上回溯。而回文串只不过是一种判断手段，这个题思路可以很简单，即判断不同位置的分割点，如果可行就进入回溯。")]),t._v(" "),s("p",[t._v("核心代码也就这几行：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backTrack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" cur_ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" s_index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .......")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s_index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPalindrome")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s_index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            cur_ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s_index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" s_index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backTrack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur_ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            cur_ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h2",{attrs:{id:"_4-回文串中的dp思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-回文串中的dp思想"}},[t._v("#")]),t._v(" 4. 回文串中的DP思想")]),t._v(" "),s("p",[t._v("前面总结的题中，有三道题主要考察的是DP。")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning-ii",target:"_blank",rel:"noopener noreferrer"}},[t._v("132. 分割回文串 II"),s("OutboundLink")],1),t._v(" 【Hard，判断回文串 + DP】")]),t._v(" "),s("ul",[s("li",[t._v("返回分割为一或多个回文串的"),s("strong",[t._v("最小分割次数")])])])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning-iii",target:"_blank",rel:"noopener noreferrer"}},[t._v("1278. 分割回文串 III"),s("OutboundLink")],1),t._v(" 【Hard，判断回文串 + DP】")]),t._v(" "),s("ul",[s("li",[t._v("允许修改以满足回文，问分割成k个回文子串"),s("strong",[t._v("需要修改的最小字符数")])])])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-insertion-steps-to-make-a-string-palindrome",target:"_blank",rel:"noopener noreferrer"}},[t._v("1312. 让字符串成为回文串的最少插入次数"),s("OutboundLink")],1),t._v(" 【Hard，构造回文串 + DP】")]),t._v(" "),s("ul",[s("li",[t._v("返回成为回文串的"),s("strong",[t._v("最少插入次数")])])])])]),t._v(" "),s("p",[t._v("下面简单分析一下各个题目的dp状态以及转移方程，这些问题都没有固定回答，以下只是我个人的理解，或许有更好的解释与答案，请及时指出。")]),t._v(" "),s("h3",{attrs:{id:"_4-1-dp维度应该包含位置信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-dp维度应该包含位置信息"}},[t._v("#")]),t._v(" 4.1 dp维度应该包含位置信息")]),t._v(" "),s("p",[t._v("其实简单题也是可以用DP解的，例如前面分别用中心扩展法和Manacher算法求解过的"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("5. 最长回文子串"),s("OutboundLink")],1),t._v(" ，也可以用DP的思想，在这个问题中：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("定义状态为$dp[i][j]$表示字符串从 i 到 j 是否为字符串，存的是true或者false。")])]),t._v(" "),s("li",[s("p",[t._v("转移方程则为：$dp[i][j] = dp[i - 1][j - 1]*(s[i] == s[j]) $")])])]),t._v(" "),s("p",[t._v("这样通过遍历可以求得最终的结果，但是这种方法并不好，时间复杂度和空间复杂度都达到了$O(N^2)$。不过它DP转移方程的思路很清晰，就是必须"),s("strong",[t._v("与一个串的起始坐标或结束坐标有关")]),t._v("（即位置信息）。")]),t._v(" "),s("p",[t._v("带着这种思想去看"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning-ii",target:"_blank",rel:"noopener noreferrer"}},[t._v("132. 分割回文串 II"),s("OutboundLink")],1),t._v("，这里要求返回拆分后的最小分割次数，在这个问题中")]),t._v(" "),s("ul",[s("li",[t._v("状态为$dp[i]$表示前 i 个字符串需要的最小分割次数")]),t._v(" "),s("li",[t._v("转移方程为：$dp[i] = min(dp[i], dp[j] + 1), j \\in [0, i - 1]$。")])]),t._v(" "),s("p",[t._v("这个题显然也是满足与串的起始坐标或者结束坐标有关，而"),s("strong",[t._v("前 i 个")]),t._v("暗含了起始坐标为0，所以状态空间也就只需要一维变量就可以了。")]),t._v(" "),s("h3",{attrs:{id:"_4-2-dp状态的含义可以首先考虑所需求解的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-dp状态的含义可以首先考虑所需求解的问题"}},[t._v("#")]),t._v(" 4.2 dp状态的含义可以首先考虑所需求解的问题")]),t._v(" "),s("p",[t._v("接下来需要思考一个问题，为什么在"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("5. 最长回文子串"),s("OutboundLink")],1),t._v("中dp状态所表示含义是**“是否为回文串”"),s("strong",[t._v("，而"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning-ii",target:"_blank",rel:"noopener noreferrer"}},[t._v("132. 分割回文串 II"),s("OutboundLink")],1),t._v("中就变成了")]),t._v("分割次数**。面对一个DP问题时，可以首先把DP状态定义成**“所需要求解的问题”"),s("strong",[t._v("，如果不行再考虑转化，这也是DP最难的地方了。在"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("5. 最长回文子串"),s("OutboundLink")],1),t._v("中，问的是最长回文子串，而我们已经考虑了用起始坐标与结束坐标去表示dp维度，两个坐标恰好就能算出长度了，因此")]),t._v("没必要再去记录长度**，只需要在dp计算过程中维护[max, max_x,max_y]就可以了。在"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning-ii",target:"_blank",rel:"noopener noreferrer"}},[t._v("132. 分割回文串 II"),s("OutboundLink")],1),t._v("中，需要求解的正是最小分割次数，若dp的含义如果是这个，转移方程也是可以推通的。")]),t._v(" "),s("p",[t._v("在问题"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-insertion-steps-to-make-a-string-palindrome",target:"_blank",rel:"noopener noreferrer"}},[t._v("1312. 让字符串成为回文串的最少插入次数"),s("OutboundLink")],1),t._v("中，")]),t._v(" "),s("ul",[s("li",[t._v("dp维度是位置信息，含义是所要求解的问题：$dp[i][j]$表示i到j所需要操作的最少数量")]),t._v(" "),s("li",[t._v("转移方程：\n"),s("ul",[s("li",[t._v("如果$s[i] \\neq s[j]$，则有$dp[i][j] = min(dp[i + 1][j] + 1, dp[i][j - 1] + 1)$")]),t._v(" "),s("li",[t._v("如果$s[i] == s[j]$，则有$dp[i][j] = min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1])$")])])])]),t._v(" "),s("p",[t._v("这个题与"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("5. 最长回文子串"),s("OutboundLink")],1),t._v("的状态设置几乎一模一样，唯一的区别是表示的含义变成了所需要的最少数量，这也导致了转移方程的变化。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-dp的维度还可以表示问题的条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-dp的维度还可以表示问题的条件"}},[t._v("#")]),t._v(" 4.3 dp的维度还可以表示问题的条件")]),t._v(" "),s("p",[t._v("接着看"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-partitioning-iii",target:"_blank",rel:"noopener noreferrer"}},[t._v("1278. 分割回文串 III"),s("OutboundLink")],1),t._v("，问题问的是（如果"),s("strong",[t._v("允许修改")]),t._v("以满足回文条件）分割成k个回文子串"),s("strong",[t._v("需要修改的最小字符数")]),t._v("，根据前面的思想，dp中需要包含起始位置、结束位置、需要的答案（需要修改的最小字符数），因此：")]),t._v(" "),s("ul",[s("li",[t._v("状态为$dp[i][j]$表示包括s[i]及以前的字符，分割成j份，所需要的修改最小字符数。")]),t._v(" "),s("li",[t._v("转移方程为$dp[i][j] = dp[j - 1] + cost(k + 1, i), k \\in [j - 2, i]$。这里面cost（i，j）是将i到j修改成回文串所需要的修改次数。")])]),t._v(" "),s("p",[t._v("这个题需要想到的话有一定难度。它的含义是"),s("strong",[t._v("所需要求解的问题")]),t._v("，维度包括，i是结束位置，起始位置为暗含的0。但是这个问题有一个附加难点，即题目条件包括"),s("strong",[t._v("分割成k个")]),t._v("非空且不相交的子串，而不是能分割成任意个。"),s("strong",[t._v("dp的转移一定不能脱离条件")]),t._v("，因此需要在另一个维度上增加j表示分割成k份。")]),t._v(" "),s("p",[t._v("联系其他DP的问题，其实这也是一种常见的操作。在"),s("strong",[t._v("0-1背包问题")]),t._v("中，我们用$dp[i][v]$表示将前 i 件物品放入容量为 v 的背包中。而这里用$dp[i][j]$表示前 i 个字符分割成 k 个回文串。"),s("strong",[t._v("两个题完全不同，但是dp维度的含义都是位置信息与问题条件的组合。")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[t._v("都写在文中了。")])])}),[],!1,null,null,null);s.default=r.exports}}]);